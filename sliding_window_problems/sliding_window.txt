- lc 76
	- Time Complexity: |S|+|S|-|T|
	- Space Complexity |S| # Editorial Section says a different time complexity, so need to check why I have a different soln.
	#  Abstraction Model 1
	#  A  ....   B ....   C
	# Sliding Window maybe ? ....
	# Some length which matches based on target length. Keep running the end pointer until you find the first target combination.
	# Once you cross that character : you have to check whether that character is still contained in the next start pointer -> end pointer window.
	# Question is how do we check?
	# Maybe be some sort of Frequency Map.
	# Hmm .. lets think about it. 
	# If the end pointer is getting incremented then your map looks something like : Number of target characters encountered.
	# So in this case its going to be:
	# {'A':1 , 'B':1 , 'C':1}
	# Now target length should be 0, because you have encountered the first combination
	# So now it's time to increment the target length by 1 since the start pointer will get increamented and pass A. 
	# This means that you are looking for a future A.

	# Abstraction Model 2
	# ABBAC
	# a = -1 , b = -1, c = 0 ; t_l = 0
	# a < 0
	# a = 0, b = - 1 , c = 0
	# you wont increment the target length if something is less than 0
   	# you will decrement the target length if something is greater than 0
    # So motivation is to have some sort of signal based on >, < 0

- lc 424
    - Time Complexity: 
	  - If there is at most 1 operation allowed and a string has all unique characters
        - Implies 2 traversals, one by end pointer, and another one by start pointer. 
        - So it should be 2|S| - where |S| is the length of the string
    - Space Complexity:
      - A variable max_length storing the maximum size of the window. 
      - A frequency map which again can be |S| - length of the string.
    # Abstraction Model 1 
    # A B C B B B B B B A, k = 2
    # Sliding window problem with atmost k operations 
	# In this case our objective is to maximize the window size (sliding end pointer as far as possible).
	# So, this can be only possible by keep a count of the individual frequency of characters and have some max frequency counter too.
	# Because we can strech only as far as the max frequency of some character.
	# Aha! -> so there is some condition until which we can slide.
    # So, end - start - max_frequency <= k (Had an example in mind while doing this)
    
